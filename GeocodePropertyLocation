public class GeocodePropertyLocation {
 
     @future (callout=true)  // future method needed to run callouts from Triggers
      static public void getLocation(id propertyId){
        // gather account info
        Property__c p = [SELECT Location__c FROM Property__c WHERE id =: propertyId];
 
        // create an address string
        
        String address = EncodingUtil.urlEncode(p.Location__c, 'UTF-8');
 
        // build callout
        Http h = new Http();
        HttpRequest req = new HttpRequest();
        req.setEndpoint('https://maps.googleapis.com/maps/api/geocode/json?address='+address+'&region=au&sensor=false&key=<your Google API key>');
        req.setMethod('GET');
        req.setTimeout(60000);
 
        try{
            // callout
            HttpResponse res = h.send(req);
 
            // parse coordinates from response
            system.debug(res.getBody());
            JSONParser parser = JSON.createParser(res.getBody());
            double lat = null;
            double lon = null;
            while (parser.nextToken() != null) {
                if ((parser.getCurrentToken() == JSONToken.FIELD_NAME) &&
                    (parser.getText() == 'location')){
                       parser.nextToken(); // object start
                       while (parser.nextToken() != JSONToken.END_OBJECT){
                           String txt = parser.getText();
                           parser.nextToken();
                           if (txt == 'lat')
                               lat = parser.getDoubleValue();
                           else if (txt == 'lng')
                               lon = parser.getDoubleValue();
                       }
 
                }
            }
 
            // update coordinates if we get back
            if (lat != null){
                p.Lat_Long__Latitude__s = lat;
                p.Lat_Long__Longitude__s = lon;
                //geoLocationProcessorControl.inFutureContext = true;
                update p;
            }
 
        } catch (Exception e) {
        }
    }
}
